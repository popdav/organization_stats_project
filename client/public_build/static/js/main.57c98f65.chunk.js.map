{"version":3,"sources":["Components/Project.js","Components/App.js","reportWebVitals.js","index.js"],"names":["Project","className","this","props","element","name","city","street","country","deleted","package","paid","React","Component","App","refresh","a","axios","post","state","searchBody","res","console","log","data","stats","avg","ptime","count","countPckg","area","get","heartbeat","setState","projects","searchClicked","page","avgSmartTag","processingTime","projectCount","projectCountPackage","totalArea","handleSelectOrganization","e","selectedOrganization","target","value","JSON","parse","handleSelectProjectType","body","all","finished","unfinished","projectsType","handleSelectProjectSub","unpaid","projectsSub","handleClickRefresh","inteval","alert","clearInterval","interval","setInterval","refreshRate","handleClickSearch","organizationName","year","yearVal","month","monthVal","handleClickPrevous","window","scrollTo","handleClickNext","length","componentDidMount","organizations","componentWillUnmount","timeConversion","millisec","seconds","toFixed","minutes","hours","days","live","Date","getMonth","getFullYear","style","marginLeft","marginRight","htmlFor","id","onChange","map","i","stringify","maskedValue","selectedYear","selectedMonth","onClick","role","avgProcessingTIme","multiple","disabled","_id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57c98f65.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css';\r\n\r\nclass Project extends React.Component {\r\n  \r\n\r\n  render() {\r\n    return (\r\n    <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          Name: {this.props.element.name} <br/>\r\n          City: {this.props.element.city} <br/>\r\n          Street: {this.props.element.street} <br/>\r\n          Country: {this.props.element.country} <br/>\r\n          Deleted: {this.props.element.deleted ? 'yes' : 'no'} <br/>\r\n          Package: {this.props.element.package} <br/>\r\n          Paid: {this.props.element.paid ? 'yes' : 'no'} <br/>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Project;\r\n","import React from 'react'\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport Project from './Project';\nimport axios from 'axios';\nimport MonthPickerInput  from 'react-month-picker-input';\nimport 'react-month-picker-input/dist/react-month-picker-input.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      refreshRate: 1000*60,\n      organizations: [],\n      projects: [],\n      selectedOrganization: '',\n      projectsType: {all: true, finished: false, unfinished: false},\n      projectsSub: {all: true, paid: false, unpaid: false},\n      page: 1,\n      searchBody: {},\n      searchClicked: false,\n      avgSmartTag: {},\n      processingTime: {},\n      projectCount: [],\n      projectCountPackage: [],\n      totalArea: [],\n      inteval: null,\n      heartbeat: {live: false},\n      monthVal: (new Date()).getMonth(), \n      yearVal: (new Date()).getFullYear()\n    }\n  }\n\n  refresh = async () => {\n    try {\n\n      let res = await axios.post('/projects', this.state.searchBody);\n      console.log(res.data);\n      let stats = await axios.post('/projectsstats', this.state.searchBody);\n      console.log(stats.data);  \n      let avg = await axios.post('/smarttag', this.state.searchBody);\n      console.log(avg)\n      let ptime = await axios.post('/processingtime', this.state.searchBody);\n      console.log(ptime)\n      let count = await axios.post('/projectcount', this.state.searchBody);\n      console.log(count)\n      let countPckg = await axios.post('/projectcountpackage', this.state.searchBody);\n      console.log(countPckg)\n      let area = await axios.post('/totalarea', this.state.searchBody);\n      console.log(area)\n      \n      let heartbeat = await axios.get('/checkworker');\n      console.log(heartbeat);\n\n      this.setState({\n        projects: res.data,\n        searchClicked: true, \n        page: 1,\n        avgSmartTag: avg.data[0],\n        processingTime: ptime.data[0],\n        projectCount: count.data,\n        projectCountPackage: countPckg.data,\n        totalArea: area.data,\n        stats: stats.data,\n        heartbeat: heartbeat.data\n      });\n\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n\n  handleSelectOrganization = (e) => {\n    this.setState({selectedOrganization: e.target.value !== '' ? JSON.parse(e.target.value) : ''});\n  };\n\n  handleSelectProjectType = (e) => {\n    let body = {all: false, finished: false, unfinished: false};\n    body[e.target.value] = true;\n    this.setState({projectsType: body});\n  };\n\n  handleSelectProjectSub = (e) => {\n    let body = {all: false, paid: false, unpaid: false};\n    body[e.target.value] = true;\n    this.setState({projectsSub: body});\n  };\n\n  handleClickRefresh = async () => {\n    if (this.state.inteval === null) {\n      alert('You need to search before refreshing');\n      return;\n    }\n    clearInterval(this.state.inteval);\n    await this.refresh();\n    this.setState({interval: setInterval(this.refresh, this.state.refreshRate)});\n  }\n\n  handleClickSearch = async () => {\n    clearInterval(this.state.inteval);\n    let body = {\n      organizationName: this.state.selectedOrganization,\n      projectsType: this.state.projectsType,\n      projectsSub: this.state.projectsSub,\n      page: 1,\n      year: this.state.yearVal,\n      month: this.state.monthVal\n    }\n\n    console.log(body)\n    try {\n\n      let res = await axios.post('/projects', body);\n      console.log(res);\n      let stats = await axios.post('/projectsstats', body);\n      console.log(stats);  \n      let avg = await axios.post('/smarttag', body);\n      console.log(avg)\n      let ptime = await axios.post('/processingtime', body);\n      console.log(ptime)\n      let count = await axios.post('/projectcount', body);\n      console.log(count)\n      let countPckg = await axios.post('/projectcountpackage', body);\n      console.log(countPckg)\n      let area = await axios.post('/totalarea', body);\n      console.log(area)\n      let heartbeat = await axios.get('/checkworker');\n      console.log(heartbeat);\n\n      this.setState({\n        projects: res.data, \n        searchBody: body, \n        searchClicked: true, \n        page: 1,\n        avgSmartTag: avg.data[0],\n        processingTime: ptime.data[0],\n        projectCount: count.data,\n        projectCountPackage: countPckg.data,\n        totalArea: area.data,\n        heartbeat: heartbeat.data,\n        stats: stats.data,\n        inteval: setInterval(this.refresh, this.state.refreshRate),\n      });\n\n    }\n    catch(err) {\n      console.log(err);\n    }\n  };\n\n  handleClickPrevous = async () => {\n    if (this.state.page === 1) {\n      alert('You are on page 1');\n      return;\n    }\n\n    let body = {\n      organizationName: this.state.selectedOrganization,\n      projectsType: this.state.projectsType,\n      projectsSub: this.state.projectsSub,\n      page: this.state.page-1\n    }\n\n    console.log(body)\n    try {\n\n      let res = await axios.post('/projects', body);\n      console.log(res.data);\n      this.setState({\n        projects: res.data, \n        searchBody: body, \n        searchClicked: true, \n        page: this.state.page-1\n      });\n      window.scrollTo(0, 0);\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n\n  handleClickNext = async () => {\n\n    let body = {\n      organizationName: this.state.selectedOrganization,\n      projectsType: this.state.projectsType,\n      projectsSub: this.state.projectsSub,\n      page: this.state.page+1\n    }\n\n    console.log(body)\n    try {\n\n      let res = await axios.post('/projects', body);\n      console.log(res.data);\n      if(res.data.length === 0) {\n        alert('There is no next page');\n        return;\n      }\n      this.setState({\n        projects: res.data, \n        searchBody: body, \n        searchClicked: true, \n        page: this.state.page+1\n      });\n      window.scrollTo(0, 0);\n\n    }\n    catch(err) {\n      console.log(err);\n    }\n  }\n\n    componentDidMount = async () => {\n\n    try {\n\n      let res = await axios.get('/organizations');\n      console.log(res.data);\n      this.setState({organizations: res.data})\n      \n      this.handleClickSearch();\n\n    }\n    catch(err) {\n      console.log(err);\n    }\n\n  }\n\n  componentWillUnmount = async () => {\n    clearInterval(this.state.inteval);\n    this.setState({interval: null});\n  }\n\n  timeConversion = (millisec) => {\n\n      var seconds = (millisec / 1000).toFixed(1);\n\n      var minutes = (millisec / (1000 * 60)).toFixed(1);\n\n      var hours = (millisec / (1000 * 60 * 60)).toFixed(1);\n\n      var days = (millisec / (1000 * 60 * 60 * 24)).toFixed(1);\n\n      if (seconds < 60) {\n          return seconds + \" Sec\";\n      } else if (minutes < 60) {\n          return minutes + \" Min\";\n      } else if (hours < 24) {\n          return hours + \" Hrs\";\n      } else {\n          return days + \" Days\"\n      }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <br/>\n        <form style={{marginLeft: \"20%\", marginRight: \"20%\"}}>\n          <div className=\"form-group\">\n            <label htmlFor=\"organizations\">Select organization:</label>\n            <select className=\"form-control\" id=\"organizations\" onChange={this.handleSelectOrganization}>\n              <option value=''>All</option>\n              {this.state.organizations.map((e, i) => {\n                return (\n                  <option key={i} value={JSON.stringify(e)} >{e.organizationName}</option>\n                )\n              })}\n            </select>\n          </div>\n\n          {/* <div className='d-flex justify-content-between'>\n            <div className='form-group'>\n              <label>Select projects type:</label>\n            </div>\n            <div className=\"form-check\">\n              <input className=\"form-check-input\" type=\"radio\"  id=\"allType\" value=\"all\" \n                     checked={this.state.projectsType.all}\n                     onChange={this.handleSelectProjectType}/>\n              <label className=\"form-check-label\" htmlFor=\"allType\">\n                All\n              </label>\n            </div>\n            <div className=\"form-check\">\n              <input className=\"form-check-input\" type=\"radio\"  id=\"finished\" value=\"finished\" \n                     checked={this.state.projectsType.finished} \n                     onChange={this.handleSelectProjectType}/>\n              <label className=\"form-check-label\" htmlFor=\"finished\">\n                Finished projects\n              </label>\n            </div>\n            <div className=\"form-check disabled\">\n              <input className=\"form-check-input\" type=\"radio\"  id=\"unfinished\" value=\"unfinished\" \n                     checked={this.state.projectsType.unfinished} \n                     onChange={this.handleSelectProjectType}/>\n              <label className=\"form-check-label\" htmlFor=\"unfinished\">\n                Unfinished projects\n              </label>\n            </div>\n          </div>\n\n          <div className='d-flex justify-content-between'>\n            <div className='form-group'>\n              <label>Select projects subscription:</label>\n            </div>\n            <div className=\"form-check\">\n              <input className=\"form-check-input\" type=\"radio\"  id=\"allSub\" value=\"all\" \n                     checked={this.state.projectsSub.all}\n                     onChange={this.handleSelectProjectSub}/>\n              <label className=\"form-check-label\" htmlFor=\"allSub\">\n                All\n              </label>\n            </div>\n            <div className=\"form-check\">\n              <input className=\"form-check-input\" type=\"radio\"  id=\"paid\" value=\"paid\" \n                     checked={this.state.projectsSub.paid}\n                     onChange={this.handleSelectProjectSub}/>\n              <label className=\"form-check-label\" htmlFor=\"paid\">\n                Paid projects\n              </label>\n            </div>\n            <div className=\"form-check disabled\">\n              <input className=\"form-check-input\" type=\"radio\"  id=\"unpaid\" value=\"unpaid\" \n                     checked={this.state.projectsSub.unpaid}\n                     onChange={this.handleSelectProjectSub}/>\n              <label className=\"form-check-label\" htmlFor=\"unpaid\">\n                Unpaid projects\n              </label>\n            </div>\n          </div> */}\n          <div className='form-group'>\n            <MonthPickerInput\n              year={this.state.yearVal}\n              month={this.state.monthVal}\n              onChange={(maskedValue, selectedYear, selectedMonth) => {\n                console.log(maskedValue, selectedYear, selectedMonth);\n                this.setState({yearVal: selectedYear, monthVal: selectedMonth});\n              }}\n            />\n          </div>\n          <div className='d-flex justify-content-between'>\n            <div className='btn btn-primary' onClick={this.handleClickSearch}>Search</div>\n            <div className='btn btn-primary' onClick={this.handleClickRefresh}>Refresh</div>\n          </div>\n        </form>\n        <br/>\n        <div style={{marginLeft: \"20%\", marginRight: \"20%\"}}>\n        {this.state.searchClicked && !this.state.heartbeat.live ? (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            Worker is down!\n          </div>)\n          : ''\n          }\n        {this.state.searchClicked ? (\n          <div className='card'>\n            <div>Page: {this.state.page}</div>\n            <div>Project count: {this.state.stats.all}</div>\n            <div>Project count per page: {this.state.projects.length}</div>\n            <div>Deleted projects: {this.state.stats.deleted}</div>\n            <div>Completed projects: {this.state.stats.finished}</div>\n            <div>Not completed projects: {this.state.stats.unfinished}</div>\n            <div>Paid projects: {this.state.stats.paid}</div>\n            <div>Unpaid projects: {this.state.stats.unpaid}</div>\n            <div>Average count of smartTags per project: {this.state.avgSmartTag ? this.state.avgSmartTag.avgSmartTag.toFixed(3) : 0}</div>\n            <div>Average project processing time: {this.state.processingTime ? this.timeConversion(this.state.processingTime.avgProcessingTIme) : 0}</div>\n            <br />\n            <div>Project count for each scanner:</div>\n            <select multiple disabled className=\"form-control\" id=\"exampleFormControlSelect2\">\n              {this.state.projectCount.map((e, i) => {\n                return (\n                <option key={i}>scanner id: {e._id === null ? 'None' : e._id}, count: {e.count}</option>\n                )\n              })}\n            </select>\n            <br />\n            <div>Total area scanned by the organization:</div>\n            <select multiple disabled className=\"form-control\" id=\"exampleFormControlSelect2\">\n              {this.state.totalArea.map((e, i) => {\n                return (\n                <option key={i}>organization id: {e._id === null ? 'None' : e._id}, count: {e.count.toFixed(3)}</option>\n                )\n              })}\n            </select>\n            <br />\n            <div>Project count for each package:</div>\n            <select multiple disabled className=\"form-control\" id=\"exampleFormControlSelect2\">\n              {this.state.projectCountPackage.map((e, i) => {\n                return (\n                <option key={i}>package: {e._id === null ? 'None' : e._id}, count: {e.count}</option>\n                )\n              })}\n            </select>\n            <br />\n          </div>\n        ) : ''}\n        <br />\n        {this.state.projects.map((e, i) => {\n          return (\n            <div key={e._id}>\n              <Project  element={e}/>\n              <br/>\n            </div>\n          )\n        })}\n\n        {this.state.searchClicked ? (<nav>\n          <ul className=\"pagination\">\n            <li className=\"page-item\" onClick={this.handleClickPrevous}><div className=\"page-link\">Previous</div></li>\n            <li className=\"page-item\" onClick={this.handleClickNext}><div className=\"page-link\">Next</div></li>\n          </ul>\n        </nav>) : ''}\n\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}